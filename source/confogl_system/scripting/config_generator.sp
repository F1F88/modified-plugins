#pragma semicolon 1
#pragma newdecls required

#include <sourcemod>
#define PLUGIN_VERSION "1.0"

public Plugin myinfo = 
{
    name = "[Any] Confogl's Config Generator",
    author = "blueblur",
    description = "Generates basic information for a confogl config.",
    version = PLUGIN_VERSION,
    url = "https://github.com/blueblur0730/modified-plugins"
}

public void OnPluginStart()
{
	CreateConVar("config_generator_version", PLUGIN_VERSION, "Config Generator Version");
	RegServerCmd("sm_make_confogl", Command_DumpPluigns, "Usage: sm_make_confogl <name> <plugin_path>");
}

Action Command_DumpPluigns(int args)
{
	if (args < 2)
	{
		PrintToServer("[Confogl] Usage: sm_make_confogl <name> <plugin_path>");
		return Plugin_Handled;
	}

	char szPath[256], szEntry[256], szSearchPath[256];
	GetCmdArg(2, szPath, sizeof(szPath));	// optional/some_confogl_plugin
	Format(szSearchPath, sizeof(szSearchPath), "%s/%s", "plugins", szPath);	// plugins/optional/some_confogl_plugin
	BuildPath(Path_SM, szEntry, sizeof(szEntry), szSearchPath);

	DirectoryListing hDir = OpenDirectory(szEntry);
	if (!hDir)
	{
		PrintToServer("[Confogl] Failed to open folder path: \"%s\".", szEntry);
		return Plugin_Handled;
	}

	char szFile[256];
	FileType type;
	ArrayList hArray = new ArrayList(ByteCountToCells(sizeof(szFile)));
	ArrayList hArrayFile = new ArrayList(ByteCountToCells(sizeof(szFile)));
	while (hDir.GetNext(szFile, sizeof(szFile), type))
	{
		// Ignore "." and ".."
		if(!strcmp(szFile, ".") || !strcmp(szFile, ".."))
			continue;

		if (type != FileType_File)
			continue;

		int len = strlen(szFile);
		if( len > 4 &&
			szFile[len - 4] == '.' &&
			szFile[len - 3] == 's' &&
			szFile[len - 2] == 'm' &&
			szFile[len - 1] == 'x'
		)
		{
			hArrayFile.PushString(szFile);	// xxx.smx
			Format(szFile, sizeof(szFile), "%s/%s", szPath, szFile);	// optional/some_confogl_plugin/xxx.smx
			hArray.PushString(szFile);
		}
	}

	delete hDir;

	char szName[128], szArg[128];
	GetCmdArg(1, szArg, sizeof(szArg));	// some_confogl_config

	if (!hArray.Length)
	{
		PrintToServer("[Confogl] No Plugin found in folder: \"%s\".", szEntry);
		delete hArray;
		return Plugin_Handled;
	}

	Format(szName, sizeof(szName), "cfg/cfgogl/%s/confogl_plugins.cfg", szArg);	// ../../cfg/cfgogl/some_confogl_config/confogl_plugins.cfg
	File hFile = OpenFile(szName, "w");
	if (!hFile)
	{
		PrintToServer("[Confogl] Failed to open config file: \"%s\".", szName);
		delete hArray;
		return Plugin_Handled;
	}

	hFile.WriteLine("// ---------------------------------------.");
	hFile.WriteLine("// Generated by Confogl Config Generator.");
	hFile.WriteLine("//");
	hFile.WriteLine("// Author: YourName.");
	hFile.WriteLine("// Config Name: %s.", szName);
	hFile.WriteLine("// File Name: confogl_plugins.cfg.");
	hFile.WriteLine("// ---------------------------------------");

	char szPlugin[256];
	ArrayList hArrayPluginPath = new ArrayList(ByteCountToCells(sizeof(szPlugin)));
	for (int i = 0; i < hArray.Length; i++)
	{
		hArray.GetString(i, szPlugin, sizeof(szPlugin));
		Format(szPlugin, sizeof(szPlugin), "sm plugins load %s", szPlugin);	// sm plugins load optional/some_confogl_plugin/xxx.smx
		hArrayPluginPath.PushString(szPlugin);
		hFile.WriteLine(szPlugin, sizeof(szPlugin));
	}

	PrintToServer("[Confogl] Config file generated: \"%s\".", szName);
	delete hFile;
	delete hArray;

	// load all the plugin to access the ConVar.
	char szPluginPath[256];
	for (int i = 0; i < hArrayPluginPath.Length; i++)
	{
		hArrayPluginPath.GetString(i, szPluginPath, sizeof(szPluginPath));	// sm plugins load optional/some_confogl_plugin/xxx.smx
		ServerCommand(szPluginPath);
	}

	Format(szName, sizeof(szName), "cfg/cfgogl/%s/confogl.cfg", szArg);	// ../../cfg/cfgogl/some_confogl_config/confogl.cfg
	File hFile_cvar = OpenFile(szName, "w");
	if (!hFile_cvar)
	{
		PrintToServer("[Confogl] Failed to open config file: \"%s\".", szName);
		return Plugin_Handled;
	}

	hFile_cvar.WriteLine("// ---------------------------------------.");
	hFile_cvar.WriteLine("// Generated by Confogl Config Generator.");
	hFile_cvar.WriteLine("//");
	hFile_cvar.WriteLine("// Author: YourName.");
	hFile_cvar.WriteLine("// Config Name: %s.", szName);
	hFile_cvar.WriteLine("// File Name: confogl.cfg.");
	hFile_cvar.WriteLine("// ---------------------------------------");

	// not sure if we can handle this on next frame, just delay this ok?
	DataPack dp = new DataPack();
	dp.WriteCell(hFile_cvar);
	dp.WriteCell(hArrayPluginPath);
	dp.WriteCell(hArrayFile);
	CreateTimer(1.0, Timer_Delay, dp);
	PrintToServer("[Confogl] Config file generated: \"%s\".", szName);

	Format(szName, sizeof(szName), "cfg/cfgogl/%s/confogl_off.cfg", szArg);	// ../../cfg/cfgogl/some_confogl_config/confogl_off.cfg
	File hFile_off = OpenFile(szName, "w");
	if (!hFile_off)
	{
		PrintToServer("[Confogl] Failed to open config file: \"%s\".", szName);
		return Plugin_Handled;
	}

	hFile_off.WriteLine("// ---------------------------------------.");
	hFile_off.WriteLine("// Generated by Confogl Config Generator.");
	hFile_off.WriteLine("//");
	hFile_off.WriteLine("// Author: YourName.");
	hFile_off.WriteLine("// Config Name: %s.", szName);
	hFile_off.WriteLine("// File Name: confogl_off.cfg.");
	hFile_off.WriteLine("// ---------------------------------------");
	hFile_off.WriteLine(" ");
	hFile_off.WriteLine("confogl_resetclientcvars");
	hFile_off.WriteLine("confogl_resetcvars");
	hFile_off.WriteLine("pred_unload_plugins");
	
	PrintToServer("[Confogl] Config file generated: \"%s\".", szName);
	delete hFile_off;

	return Plugin_Handled;
}

void Timer_Delay(Handle hTimer, DataPack dp)
{
	dp.Reset();
	File hFile_cvar = dp.ReadCell();
	ArrayList hArrayPluginPath = dp.ReadCell();
	ArrayList hArrayFile = dp.ReadCell();
	delete dp;

	// this part is too bullshit.
	char sPluginName[256];
	ArrayList hArrayPlugin = new ArrayList();
	Handle hIter = GetPluginIterator();
	Handle hCurrentPlugin;
	while (MorePlugins(hIter))
	{
		hCurrentPlugin = ReadPlugin(hIter);
		if (hCurrentPlugin != null)
		{
			GetPluginFilename(hCurrentPlugin, sPluginName, sizeof(sPluginName));
			for (int i = 0; i < hArrayFile.Length; i++)
			{
				char sBuffer[256];
				hArrayFile.GetString(i, sBuffer, sizeof(sBuffer));
				if (StrContains(sPluginName, sBuffer) > -1)
					hArrayPlugin.Push(hCurrentPlugin);
			}
		}
	}

	// iterator has no method to reset the pointer so we have to start over again and again. insane.
	delete hIter;
	delete hArrayFile;

	// let's find convars.
	char sConCommand[256]; bool bIsCommand; Handle hPlugin;
	char szPluginPath[256];
	Handle hConCmdIter = FindFirstConCommand(sConCommand, sizeof(sConCommand), bIsCommand);
	hFile_cvar.WriteLine(" ");
	if (hConCmdIter)
	{
		do
		{
			// it's a convar.
			if (sConCommand[0] != '\0' && !bIsCommand)
			{
				static ConVar hCvar = null; 
				hCvar = FindConVar(sConCommand);
				if (hCvar && hCvar.Plugin)
				{
					for (int i = 0; i < hArrayPlugin.Length; i++)
					{
						hPlugin = hArrayPlugin.Get(i);
						if (hPlugin == hCvar.Plugin)
						{
							char szDefault[256];
							hCvar.GetDefault(szDefault, sizeof(szDefault));
							hFile_cvar.WriteLine("confogl_addcvar %s %s", sConCommand, szDefault);
						}		
					}
				}
			}
		}
		while (FindNextConCommand(hConCmdIter, sConCommand, sizeof(sConCommand), bIsCommand));

		hFile_cvar.WriteLine(" ");
		hFile_cvar.WriteLine("// Collected all cvars, set their default values and lock the change.");
		hFile_cvar.WriteLine("confogl_setcvars");
		hFile_cvar.WriteLine(" ");
		hFile_cvar.WriteLine("// Remove all tracked client cvars. Cannot be called during matchmode");
		hFile_cvar.WriteLine("confogl_resetclientcvars");
		hFile_cvar.WriteLine(" ");
		hFile_cvar.WriteLine("// Set client cvars that should be tracked.");
		hFile_cvar.WriteLine("//confogl_setclientcvars <cvar_name> <hasMin> <min> <hasMax> <max>");
		hFile_cvar.WriteLine(" ");
		hFile_cvar.WriteLine("// Start client cvar tracking.");
		hFile_cvar.WriteLine("confogl_startclientchecking");
		
		delete hConCmdIter;
		delete hFile_cvar;
		delete hArrayPlugin;
	}

	for (int i = 0; i < hArrayPluginPath.Length; i++)
	{
		hArrayPluginPath.GetString(i, szPluginPath, sizeof(szPluginPath));	// sm plugins load optional/some_confogl_plugin/xxx.smx
		ReplaceString(szPluginPath, sizeof(szPluginPath), "sm plugins load", "sm plugins unload", true);
		ServerCommand(szPluginPath);
	}

	delete hArrayPluginPath;
}